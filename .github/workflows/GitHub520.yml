name: 更新 GitHub520.plugin

on:
  schedule:
    - cron: '0 * * * *'  # 每小时执行一次
  workflow_dispatch:  # 手动触发

jobs:
  update-file:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4  # 更新到支持 Node.js 20 的版本

    - name: Download hosts file
      run: wget -q -O hosts https://raw.githubusercontent.com/zwrt/hosts/refs/heads/main/hosts

    - name: Process the file
      run: |
        echo '#!name=GitHub520' > GitHub520.plugin
        echo '#!icon=https://github.com/shindgewongxj/WHATSINStash/blob/main/icon/glados.png' >> GitHub520.plugin
        awk '!/^#/ && NF' hosts | \
        awk '{$1=$1}1' | \
        awk '{print $2 " " $1}' >> GitHub520.plugin

    - name: Commit changes
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add GitHub520.plugin
        git commit -m 'Update GitHub520.plugin'
        git push

  cleanup:
    runs-on: ubuntu-latest

    steps:
    - name: Delete old successful workflow runs
      uses: actions/github-script@v7  # 更新到支持 Node.js 20 的版本
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: workflows } = await github.rest.actions.listRepoWorkflows({
            owner: context.repo.owner,
            repo: context.repo.repo
          });

          const workflow = workflows.workflows.find(wf => wf.name === 'Update GitHub520.plugin and Clean Workflow History');
          if (!workflow) {
            throw new Error('Workflow not found');
          }

          const { data: workflowRuns } = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: workflow.id,
            per_page: 100
          });

          const successfulRuns = workflowRuns.workflow_runs.filter(run => run.conclusion === 'success');
          const runsToDelete = successfulRuns.slice(5); // 保留最近5个成功运行记录

          for (const run of runsToDelete) {
            await github.rest.actions.deleteWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: run.id
            });
          }
